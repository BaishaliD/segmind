{"version":3,"sources":["Gallery.js","ImageDetector.js","App.js","reportWebVitals.js","index.js"],"names":["Gallery","props","images","openCanvas","dataRaw","console","log","useState","currentPage","setCurrentPage","data","offset","currentPageData","slice","map","src","coco_url","onClick","pageCount","Math","ceil","length","className","previousLabel","nextLabel","onPageChange","selectedPage","selected","containerClassName","previousLinkClassName","nextLinkClassName","disabledClassName","activeClassName","ImageDetector","selectedImage","annotations","renderCanvas","width","showLabels","hideLabels","id","height","useEffect","resize","App","componentDidMount","generateColorList","colors","color","floor","random","indexOf","push","toString","handleChange","event","target","value","setState","JSON","parse","handleSubmit","preventDefault","state","fileInput","uploadFile","demoDataInput","useDemoData","a","fetch","res","json","demoData","displayImages","upload","document","getElementById","files","reader","FileReader","addEventListener","result","readAsText","imageObj","showCanvas","image","paper","setup","Raster","source","position","view","center","forEach","element","arr","bbox","x","y","rectangle","Rectangle","path","Path","hasStroke","strokeColor","category_id","text","PointText","point","Point","content","justification","fontFamily","fillColor","rect","bounds","insertAbove","this","href","type","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4fd63c9c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport \"./gallery.css\";\r\n\r\nconst PER_PAGE = 8;\r\n\r\nexport default function Gallery(props) {\r\n\r\n  const {images, openCanvas, dataRaw} = props;\r\n\r\n  console.log(\"DATA PASSED TO GALLERY\", dataRaw);\r\n\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  const data = images;\r\n  function handlePageClick({ selected: selectedPage }) {\r\n    setCurrentPage(selectedPage);\r\n  }\r\n\r\n  const offset = currentPage * PER_PAGE;\r\n\r\n  const currentPageData = data\r\n    .slice(offset, offset + PER_PAGE)\r\n    .map((data) => <img src={data.coco_url} onClick={() => openCanvas(data)}/>);\r\n\r\n  const pageCount = Math.ceil(data.length / PER_PAGE);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Image gallery</h1>\r\n      <div className = \"imageGrid\">\r\n        {currentPageData}\r\n      </div>\r\n      <ReactPaginate\r\n        previousLabel={\"← Previous\"}\r\n        nextLabel={\"Next →\"}\r\n        pageCount={pageCount}\r\n        onPageChange={handlePageClick}\r\n        containerClassName={\"pagination\"}\r\n        previousLinkClassName={\"pagination__link\"}\r\n        nextLinkClassName={\"pagination__link\"}\r\n        disabledClassName={\"pagination__link--disabled\"}\r\n        activeClassName={\"pagination__link--active\"}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport paper from \"paper\";\r\n\r\nconst ImageDetector = (props) => {\r\n  const {selectedImage, annotations, renderCanvas, showLabels, hideLabels} = props;\r\n  const imageId = selectedImage.id;\r\n  const imageUrl= selectedImage.coco_url;\r\n  const width = selectedImage.width;\r\n  const height = selectedImage.height;\r\n  const annotationsArray = [];\r\n  \r\n  useEffect(() => {\r\n    renderCanvas(selectedImage, annotations);\r\n  })\r\n\r\n  return(\r\n      <div className=\"cart\">\r\n            <canvas id='paper-canvas' height={height} width={width} resize=\"true\" ></canvas> \r\n      </div>\r\n    \r\n  )\r\n};\r\n\r\nexport default ImageDetector;\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\nimport Gallery from \"./Gallery\";\nimport ImageDetector from \"./ImageDetector\";\nimport paper from \"paper\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      data : null,\n      displayImages: false,\n      selectedImage: null,\n      showCanvas: false,\n      fileInput : false,\n      demoDataInput : false,\n    };\n    this.colors = [];\n    // this.handleChange = this.handleChange.bind(this);\n    // this.handleSubmit = this.handleSubmit.bind(this);\n    // this.openCanvas = this.openCanvas.bind(this);\n    \n  } \n\n  componentDidMount = () => {\n    this.generateColorList();    \n  }\n\n  generateColorList = () => {\n    while (this.colors.length < 100) {\n      do {\n          var color = Math.floor((Math.random()*1000000)+1);\n      } while (this.colors.indexOf(color) >= 0);\n      this.colors.push(\"#\" + (\"000000\" + color.toString(16)).slice(-6));\n    }\n  }\n\n  handleChange = (event) => {\n    console.log(\"HANDLE CHANGE\", event.target.value, this);\n    this.setState({ data: JSON.parse(event.target.value) });\n  } \n\n  handleSubmit = (event) => {\n\n    console.log(\"HANDLE SUBMIT\");\n    event.preventDefault();\n\n    if(this.state.fileInput==true)\n      this.uploadFile();\n    else if (this.state.demoDataInput==true){ \n      this.useDemoData();     \n    }\n    \n  }\n\n  useDemoData = async () => {\n    const res = await fetch('https://api.jsonbin.io/b/600dc2edd4d77374a3f42c2d');\n    const demoData = await res.json();\n    console.log(\"DEMO DATA\",demoData);\n    this.setState({data : demoData, displayImages: true});\n  } \n\n  uploadFile = () => {\n    var upload = document.getElementById('fileInput');  \n    // Make sure the DOM element exists and the file is uploaded\n    if (upload && upload.files.length>0) \n    {\n        // Make sure a file was selected\n          var reader = new FileReader(); // File reader to read the file           \n          // This event listener will happen when the reader has read the file\n          reader.addEventListener('load', () => {\n            var result = JSON.parse(reader.result); // Parse the result into an object \n            console.log(\"DATA IN UPLAD FILE FUNCTION\",result);\n            this.setState({ data: result, displayImages: true});\n          });\n          \n          reader.readAsText(upload.files[0]); // Read the uploaded file\n    }\n  }\n\n  openCanvas = (imageObj) => {\n    console.log(\"SELECTED IMAGE\", imageObj);\n    this.setState({\n      showCanvas: true,\n      displayImages: false,\n      selectedImage: imageObj,\n    });\n  }\n\n  renderCanvas = (image, annotations) => {\n    console.log(\"RENDER CANVAS\",annotations);\n    paper.setup(\"paper-canvas\");\n    var raster = new paper.Raster({\n      source: image.coco_url,\n      position: paper.view.center,\n    });    \n\n    annotations.forEach((element) => {\n      const arr = element.bbox;\n\n      const x = arr[0];\n      const y = arr[1];\n      const width = arr[2];\n      const height = arr[3];\n\n      var rectangle = new paper.Rectangle(x, y, width, height);\n      var path = new paper.Path.Rectangle(rectangle);\n      path.hasStroke = true;\n      path.strokeColor = this.colors[element.category_id]; \n      \n    //   path.onMouseEnter = function(event) {\n    //   console.log(\"MOUSE ENTERSSS\");\n    //   this.fillColor = 'red';\n    // }\n\n    // path.onMouseLeave = function(event) {\n    //   console.log(\"MOUSE Leavesss\");\n    //   this.fillColor = 'rgba(0,0,0,0)';\n    // }\n      \n    });\n  }\n\n  showLabels = (annotations) => {\n      annotations.forEach((element) => {\n        const x = element.bbox[0];\n        const y = element.bbox[1]; \n    \n        var text = new paper.PointText({\n          point: new paper.Point(x, y),\n          content: \"text\",\n          justification: \"center\",\n          fontFamily: 'Noto Sans',\n          fillColor: 'white'\n        });\n        var rect = new paper.Path.Rectangle(text.bounds);\n        rect.fillColor = 'black';\n        rect.strokeColor = 'black';\n        text.insertAbove(rect);\n        \n      })            \n  }\n\n  hideLabels = (annotations) => {\n    this.renderCanvas(this.state.selectedImage,annotations);\n  }\n\n\n  render() {\n    const { data, displayImages, selectedImage, showCanvas, fileInput, demoDataInput } = this.state;\n    return (\n      <div>\n        <h1>Object Detection</h1>\n        <div>\n          Upload a JSON file (in COCO JSON format), or use our <a href=\"https://api.jsonbin.io/b/600dc2edd4d77374a3f42c2d\" target=\"_blank\">demo dataset</a>. \n        </div>\n        <button onClick={() => {this.setState({ fileInput: true });}}>Upload JSON</button>\n        <button onClick={() => {this.setState({ demoDataInput: true });}}>Use Demo Dataset</button>\n        <div>\n          {fileInput ? (\n            <input type=\"file\" id=\"fileInput\"></input>\n          ) : ('')}\n          {demoDataInput ? (\n            <div>Demo file uploaded. Please press Submit.</div>\n          ) : ('')}\n        </div>\n        <button onClick={this.handleSubmit}>Submit</button>\n        {/* <form onSubmit={this.handleSubmit}>\n          <br />\n          <textarea\n            id=\"input-area\"\n            name=\"input\"\n            rows=\"10\"\n            cols=\"50\"\n            value={JSON.stringify(data)}\n            onChange={this.handleChange}\n          />\n          <input type=\"file\" id=\"fileInput\"></input>\n          <input type=\"submit\" value=\"Submit\" />\n        </form> */}\n        {displayImages ? (\n          <Gallery dataRaw={data} images={data.images} openCanvas={this.openCanvas} />\n        ) : (\n          \"\"\n        )}\n        {showCanvas ? (\n          <ImageDetector\n            selectedImage={selectedImage}\n            annotations={data.annotations}\n            renderCanvas={this.renderCanvas}\n            showLabels={this.showLabels}\n            hideLabels={this.hideLabels}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}