{"version":3,"sources":["Navbar.js","ImageDetector.js","Gallery.js","Homepage.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","style","navbar","height","display","justifyContent","alignItems","color","ImageDetector","props","location","state","selectedImage","annotations","categories","imageId","id","width","coco_url","annotationsArray","colors","hideLabels","e","canvas","document","getElementById","getContext","clearRect","clearCanvas","paper","Raster","source","position","view","center","forEach","element","image_id","arr","bbox","x","y","rectangle","Rectangle","path","Path","hasStroke","strokeWidth","strokeColor","category_id","useEffect","length","Math","floor","random","indexOf","push","toString","slice","generateColorList","setup","className","resize","onMouseEnter","label","find","name","text","PointText","point","Point","content","justification","fontFamily","fillColor","rect","bounds","insertAbove","onMouseLeave","Gallery","images","dataRaw","history","useHistory","useState","currentPage","setCurrentPage","data","offset","currentPageData","map","src","onClick","pathname","pageCount","ceil","previousLabel","nextLabel","onPageChange","selectedPage","selected","containerClassName","previousLinkClassName","nextLinkClassName","disabledClassName","activeClassName","React","Component","App","handleChange","event","setState","JSON","parse","target","value","handleSubmit","preventDefault","fileInput","uploadFile","demoDataInput","useDemoData","a","fetch","res","json","demoData","displayImages","upload","files","reader","FileReader","addEventListener","result","readAsText","showCanvas","this","backgroundColor","padding","href","type","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.298d1638.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Navbar(){\r\n    return(\r\n        <div style={style.navbar}>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst style = {\r\n    navbar : {\r\n        height : '50px',\r\n        display: 'flex',\r\n        justifyContent : 'center',\r\n        alignItems : 'center',\r\n        color : 'black'\r\n    }\r\n}","import React, { useEffect } from \"react\";\r\nimport paper from \"paper\";\r\n\r\nconst ImageDetector = (props) => {\r\n\r\n  const { selectedImage, annotations, categories } = props.location.state;\r\n  const imageId = selectedImage.id;\r\n  const imageUrl = selectedImage.coco_url;\r\n  const width = selectedImage.width;\r\n  const height = selectedImage.height;\r\n  const annotationsArray = [];\r\n  const colors = [];\r\n\r\n  \r\n  function generateColorList(){\r\n    while (colors.length < 100) {\r\n      do {\r\n          var color = Math.floor((Math.random()*1000000)+1);\r\n      } while (colors.indexOf(color) >= 0);\r\n      colors.push(\"#\" + (\"000000\" + color.toString(16)).slice(-6));\r\n    }\r\n  }\r\n\r\n  function renderCanvas() {\r\n    paper.setup(\"paper-canvas\");\r\n    var raster = new paper.Raster({\r\n      source: selectedImage.coco_url,\r\n      position: paper.view.center,\r\n    });\r\n\r\n    annotations.forEach((element) => {\r\n      if (element.image_id == imageId) {\r\n        const arr = element.bbox;\r\n\r\n        const x = arr[0];\r\n        const y = arr[1];\r\n        const width = arr[2];\r\n        const height = arr[3];\r\n\r\n        var rectangle = new paper.Rectangle(x, y, width, height);\r\n        var path = new paper.Path.Rectangle(rectangle);\r\n        path.hasStroke = true;\r\n        path.strokeWidth = 2;\r\n        path.strokeColor = colors[element.category_id];\r\n\r\n        annotationsArray.push(element);\r\n      }\r\n    });\r\n  }\r\n\r\n  function showLabels(e) {\r\n    // e.preventDefault();\r\n    annotationsArray.forEach((element) => {\r\n\r\n      const label = categories.find(x => x.id === element.category_id).name;\r\n      \r\n      const x = element.bbox[0];\r\n      const y = element.bbox[1];\r\n\r\n      var text = new paper.PointText({\r\n        point: new paper.Point(x, y),\r\n        content: label,\r\n        justification: \"center\",\r\n        fontFamily: \"Noto Sans\",\r\n        fillColor: \"white\",\r\n      });\r\n      var rect = new paper.Path.Rectangle(text.bounds);\r\n      rect.fillColor = \"black\";\r\n      rect.strokeColor = \"black\";\r\n      text.insertAbove(rect);\r\n    });\r\n  }\r\n\r\n  function clearCanvas(){\r\n    let canvas = document.getElementById(\"paper-canvas\");\r\n    let ctx = canvas.getContext(\"2d\");\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n  }\r\n\r\n\r\n  function hideLabels(e) {\r\n    // e.preventDefault();\r\n    clearCanvas();\r\n\r\n    var raster = new paper.Raster({\r\n      source: selectedImage.coco_url,\r\n      position: paper.view.center,\r\n    });\r\n\r\n    annotationsArray.forEach((element) => {\r\n      if (element.image_id == imageId) {\r\n        const arr = element.bbox;\r\n\r\n        const x = arr[0];\r\n        const y = arr[1];\r\n        const width = arr[2];\r\n        const height = arr[3];\r\n\r\n        var rectangle = new paper.Rectangle(x, y, width, height);\r\n        var path = new paper.Path.Rectangle(rectangle);\r\n        path.hasStroke = true;\r\n        path.strokeWidth = 2;\r\n        path.strokeColor = colors[element.category_id];\r\n      }\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    generateColorList();\r\n    renderCanvas();\r\n  });\r\n\r\n  return (\r\n    <div className=\"flex\">\r\n      <canvas\r\n        id=\"paper-canvas\"\r\n        height={height}\r\n        width={width}\r\n        resize=\"true\"\r\n        onMouseEnter={(e) => {\r\n          showLabels(e);\r\n        }}\r\n        onMouseLeave={(e) => {\r\n          hideLabels(e);\r\n        }}\r\n      ></canvas>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageDetector;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport ImageDetector from './ImageDetector';\r\nimport \"./gallery.css\";\r\nimport {Route, BrowserRouter as Router, Link, useHistory} from 'react-router-dom';\r\n\r\nconst PER_PAGE = 8;\r\n\r\nexport default function Gallery(props) {\r\n\r\n  const {images, dataRaw} = props;\r\n  \r\n  const history = useHistory();\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  const data = images;\r\n  function handlePageClick({ selected: selectedPage }) {\r\n    setCurrentPage(selectedPage);\r\n  }\r\n\r\n  const offset = currentPage * PER_PAGE;\r\n\r\n  const currentPageData = data\r\n    .slice(offset, offset + PER_PAGE)\r\n    .map((data) => <img src={data.coco_url}  onClick={()=> {history.push({pathname: '/canvas', state: {selectedImage: data, annotations: dataRaw.annotations, categories: dataRaw.categories}});}}></img>);\r\n\r\n  const pageCount = Math.ceil(data.length / PER_PAGE);\r\n\r\n  return (\r\n      <div className=\"App\">\r\n      <div className = \"imageGrid\">\r\n        {currentPageData}\r\n      </div>\r\n      <ReactPaginate\r\n        previousLabel={\"← Previous\"}\r\n        nextLabel={\"Next →\"}\r\n        pageCount={pageCount}\r\n        onPageChange={handlePageClick}\r\n        containerClassName={\"pagination\"}\r\n        previousLinkClassName={\"pagination__link\"}\r\n        nextLinkClassName={\"pagination__link\"}\r\n        disabledClassName={\"pagination__link--disabled\"}\r\n        activeClassName={\"pagination__link--active\"}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Gallery from './Gallery';\r\n\r\nclass Homepage extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }   \r\n\r\n    render(){\r\n        const {fileInput, demoDataInput, displayImages, data, handleSubmit} = this.props;\r\n        return(\r\n            <div>\r\n            <div style={{backgroundColor: 'lightGray', padding: '20px 0'}}>\r\n                <h1>Object Detection</h1>\r\n                <h2>\r\n                  Upload a JSON file (in COCO JSON format), or use our <a href=\"https://api.jsonbin.io/b/600dc2edd4d77374a3f42c2d\" target=\"_blank\">demo dataset</a>. \r\n                </h2>\r\n                <div className={'flex mb-20'}>\r\n                    <button onClick={() => {this.setState({ fileInput: true, demoDataInput: false });}}>Upload JSON</button>\r\n                    <button onClick={() => {this.setState({ demoDataInput: true, fileInput: false });}}>Use Demo Dataset</button>  \r\n                </div>        \r\n                <div>\r\n                  {fileInput ? (\r\n                    <div className={'flex mb-20'}>\r\n                      <input type=\"file\" id=\"fileInput\"></input>\r\n                    </div>            \r\n                  ) : ('')}\r\n                  {demoDataInput ? (\r\n                    <h3>Demo file uploaded. Please press Submit.</h3>\r\n                  ) : ('')}\r\n                </div>\r\n                <div className={'flex mb-20'}>\r\n                  <button onClick={this.handleSubmit}>Submit</button>\r\n                </div>\r\n            </div>\r\n    \r\n            {displayImages ? (\r\n              <Gallery dataRaw={data} images={data.images} />\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {/* {showCanvas ? (\r\n              <ImageDetector\r\n                selectedImage={selectedImage}\r\n                annotations={data.annotations}\r\n                renderCanvas={this.renderCanvas}\r\n                showLabels={this.showLabels}\r\n                hideLabels={this.hideLabels}\r\n              />\r\n            ) : (\r\n              \"\"\r\n            )} */}\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Homepage;","import React from \"react\";\nimport Navbar from './Navbar';\nimport Gallery from \"./Gallery\";\nimport ImageDetector from \"./ImageDetector\";\nimport Homepage from './Homepage';\nimport './App.css';\nimport {Route, BrowserRouter as Router, Link} from 'react-router-dom';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      data : null,\n      displayImages: false,\n      selectedImage: null,\n      showCanvas: false,\n      fileInput : false,\n      demoDataInput : false,\n    };    \n  } \n\n  handleChange = (event) => {\n    this.setState({ data: JSON.parse(event.target.value) });\n  } \n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if(this.state.fileInput==true)\n      this.uploadFile();\n    else if (this.state.demoDataInput==true){ \n      this.useDemoData();     \n    }    \n  }\n\n  useDemoData = async () => {\n    const res = await fetch('https://api.jsonbin.io/b/600dc2edd4d77374a3f42c2d');\n    const demoData = await res.json();\n    this.setState({data : demoData, displayImages: true});\n  } \n\n  uploadFile = () => {\n    var upload = document.getElementById('fileInput');  \n    // Make sure the DOM element exists and the file is uploaded\n    if (upload && upload.files.length>0) \n    {\n        // Make sure a file was selected\n          var reader = new FileReader(); // File reader to read the file           \n          // This event listener will happen when the reader has read the file\n          reader.addEventListener('load', () => {\n            var result = JSON.parse(reader.result); // Parse the result into an object \n            this.setState({ data: result, displayImages: true});\n          });\n          \n          reader.readAsText(upload.files[0]); // Read the uploaded file\n    }\n  }\n\n  // hideLabels = (annotations) => {\n  //   this.renderCanvas(this.state.selectedImage,annotations);\n  // }\n\n\n  render() {\n    const { data, displayImages, selectedImage, showCanvas, fileInput, demoDataInput } = this.state;\n    return (\n      <Router>\n            <div>\n            <Navbar/>\n            {/* <Homepage\n              fileInput={fileInput}\n              demoDataInput={demoDataInput}\n              displayImages={displayImages}\n              data={data}\n              handleSubmit={this.handleSubmit}\n            /> */}\n            <div style={{backgroundColor: 'lightGray', padding: '20px 0'}}>\n                <h1>Object Detection</h1>\n                <h2>\n                  Upload a JSON file (in COCO JSON format), or use our <a href=\"https://api.jsonbin.io/b/600dc2edd4d77374a3f42c2d\" target=\"_blank\">demo dataset</a>. \n                </h2>\n                <div className={'flex mb-20'}>\n                    <button onClick={() => {this.setState({ fileInput: true, demoDataInput: false });}}>Upload JSON</button>\n                    <button onClick={() => {this.setState({ demoDataInput: true, fileInput: false });}}>Use Demo Dataset</button>  \n                </div>        \n                <div>\n                  {fileInput ? (\n                    <div className={'flex mb-20'}>\n                      <input type=\"file\" id=\"fileInput\"></input>\n                    </div>            \n                  ) : ('')}\n                  {demoDataInput ? (\n                    <h3>Demo file uploaded. Please press Submit.</h3>\n                  ) : ('')}\n                </div>\n                <div className={'flex mb-20'}>\n                  <button onClick={this.handleSubmit}>Submit</button>\n                </div>\n            </div>\n    \n            {displayImages ? (\n              <Gallery dataRaw={data} images={data.images} />\n            ) : (\n              \"\"\n            )}\n            {/* {showCanvas ? (\n              <ImageDetector\n                selectedImage={selectedImage}\n                annotations={data.annotations}\n                renderCanvas={this.renderCanvas}\n                showLabels={this.showLabels}\n                hideLabels={this.hideLabels}\n              />\n            ) : (\n              \"\"\n            )} */}\n          </div>\n      <Route path=\"/canvas\" component={ImageDetector}/>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}